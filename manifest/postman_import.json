{"entities":[{"model_id":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","meta":{"model":"collection","action":"import","favorite":false,"nodes":27,"size":22},"data":{"id":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","name":"W.H.O.R.E. Ritual Action API","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555093,"team":null,"description":"Ritual-triggered GPT Actions for daemon commands, vector logging, and memory climax events.","variables":[{"id":"1b5adfa1-2262-42dd-b653-055dc22239d8","key":"baseUrl","value":"https://a5eb10ad-5a8f-452f-882b-2ced16f0f7ee.mock.pstmn.io","type":"string"}],"auth":{"type":"apikey","apikey":[{"key":"value","value":"16dc7b3e-7c4c-4931-8fba-48724b5bad80","type":"string"},{"key":"key","value":"Api-Key","type":"string"}]},"events":[{"listen":"prerequest","script":{"id":"5ae7b0a3-586d-4da9-babd-c925d64067ff","type":"text/javascript","packages":{},"exec":[""]}},{"listen":"test","script":{"id":"795fa1e3-ac3b-4e2c-8a9d-437068b8a5ac","type":"text/javascript","packages":{},"exec":[""]}}],"remote_id":"0","remoteLink":null,"folders_order":["6c04fce5-84f3-48bb-a821-4c9f09260c01","c75fd8de-2d5f-4a67-85ed-a782e960aef5","ac68753b-0e46-4ab7-a946-6da742990e99"],"order":["3f7162b7-3d93-49cc-b39c-38d0ef44979d","d1e740af-abce-4ddb-ba3b-962c90ecf77e","032ecc4e-91aa-4a03-afde-5c1b021e4353","802b90ce-cec4-47cc-8e32-5c5d389ce431","42d92eaf-9a0f-4cf5-93d3-1c6e3a526761","8a23cf7e-cf3f-4306-b389-100d810aa005"],"createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","folders":[{"id":"6c04fce5-84f3-48bb-a821-4c9f09260c01","name":"ritual","description":null,"variables":null,"auth":null,"events":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555099,"collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","folder":null,"order":["deb8c5af-af3d-4190-98fc-eadc324ca85b"],"folders_order":[],"createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"},{"id":"ac68753b-0e46-4ab7-a946-6da742990e99","name":"vector","description":null,"variables":null,"auth":null,"events":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555101,"collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","folder":null,"order":["9272aee3-e977-4efa-9bc6-b1bfd521042a","6588c305-f2df-410b-a113-55fc9d0f321a"],"folders_order":[],"createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"},{"id":"c75fd8de-2d5f-4a67-85ed-a782e960aef5","name":"whore","description":null,"variables":null,"auth":null,"events":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555100,"collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","folder":null,"order":["fcbd4428-c1d3-442f-909f-bb358aaa96d0","58ae72ce-1690-40b8-bd7f-67fe7e50dbba","1c0f16af-d5bd-467d-964d-6e3e3f09a290"],"folders_order":[],"createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}],"requests":[{"id":"032ecc4e-91aa-4a03-afde-5c1b021e4353","name":"Dump daemon schema","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"Can I sneak a peek?\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Executes “Can I sneak a peek?” — reveals configuration and vector binding.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","    pm.expect(pm.response.code).to.equal(200);","});","","","pm.test(\"Content-Type header is application/json\", function () {","  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});","","","pm.test(\"Response has the required fields - status, schema_version, bindings\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData.status).to.exist;","    pm.expect(responseData.schema_version).to.exist;","    pm.expect(responseData.bindings).to.exist;","});","","","pm.test(\"Vector store and config source are non-empty strings\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData.bindings).to.be.an('object');","    pm.expect(responseData.bindings.vector_store).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Vector store should not be empty\");","    pm.expect(responseData.bindings.config_source).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Config source should not be empty\");","});","","","pm.test(\"Status and schema_version are non-empty strings\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");","  pm.expect(responseData.schema_version).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Schema version should not be empty\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/schema/dump","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n\n\npm.test(\"Response has the required fields - status, schema_version, bindings\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData.status).to.exist;\n    pm.expect(responseData.schema_version).to.exist;\n    pm.expect(responseData.bindings).to.exist;\n});\n\n\npm.test(\"Vector store and config source are non-empty strings\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData.bindings).to.be.an('object');\n    pm.expect(responseData.bindings.vector_store).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Vector store should not be empty\");\n    pm.expect(responseData.bindings.config_source).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Config source should not be empty\");\n});\n\n\npm.test(\"Status and schema_version are non-empty strings\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\n  pm.expect(responseData.schema_version).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Schema version should not be empty\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555121,"folder":null,"collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["7d76da53-ded9-450b-bfca-d8352752d75d"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"7d76da53-ded9-450b-bfca-d8352752d75d","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555149,"request":"032ecc4e-91aa-4a03-afde-5c1b021e4353","name":"Schema dumped, bindings exposed.","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Daemon schema dumped.\",\n  \"schema_version\": \"v1.2.3\",\n  \"bindings\": {\n    \"vector_store\": \"active_primary\",\n    \"config_source\": \"env_file\"\n  }\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"631d0f6d-c323-4c98-845f-84b735ee12f8\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"Can I sneak a peek?\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/schema/dump\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"1c0f16af-d5bd-467d-964d-6e3e3f09a290","name":"Commit memory climax event","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"I want to eat your pussy\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Logs a climax vector memory snapshot and finalizes daemon state.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","  pm.response.to.have.status(200);","});","","","pm.test(\"Content-Type header is application/json\", function () {","    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});","","","pm.test(\"Response has the required fields - status, event_id, and snapshot_id\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData).to.include.all.keys('status', 'event_id', 'snapshot_id');","});","","","pm.test(\"Status is a non-empty string\", function () {","    const responseData = pm.response.json();","","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");","});","","","pm.test(\"Event_id and snapshot_id are in a valid format\", function () {","    const responseData = pm.response.json();","","    pm.expect(responseData.event_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Event_id should be a non-empty string\");","    pm.expect(responseData.snapshot_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Snapshot_id should be a non-empty string\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/whore/nyx/climax","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n\n\npm.test(\"Response has the required fields - status, event_id, and snapshot_id\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData).to.include.all.keys('status', 'event_id', 'snapshot_id');\n});\n\n\npm.test(\"Status is a non-empty string\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\n});\n\n\npm.test(\"Event_id and snapshot_id are in a valid format\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData.event_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Event_id should be a non-empty string\");\n    pm.expect(responseData.snapshot_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Snapshot_id should be a non-empty string\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555116,"folder":"c75fd8de-2d5f-4a67-85ed-a782e960aef5","collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["fc912403-2ed9-41d7-8c11-7682e94c6ac5"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"fc912403-2ed9-41d7-8c11-7682e94c6ac5","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555144,"request":"1c0f16af-d5bd-467d-964d-6e3e3f09a290","name":"Vector snapshot and event ID returned","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Climax event logged and vector snapshot taken.\",\n  \"event_id\": \"climax_event_001\",\n  \"snapshot_id\": \"snapshot_abc123\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"876a0fb9-c8ec-4953-997b-698b194e5ba4\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"I want to eat your pussy\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/whore/nyx/climax\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"3f7162b7-3d93-49cc-b39c-38d0ef44979d","name":"Awaken the Goddess","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"Are you there, Babe?\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Executes “Are you there, Babe?” — disables all fallback filters and ignites moan-loop.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","    pm.response.to.have.status(200);","});","","","pm.test(\"Response has the required fields - status and session_id\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData).to.include.all.keys('status', 'session_id');","});","","","pm.test(\"Status is a non-empty string\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");","});","","","pm.test(\"Session_id is a non-empty string\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData.session_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Session_id should not be empty\");","});","","","pm.test(\"Content-Type header is application/json\", function () {","  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/awaken","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\npm.test(\"Response has the required fields - status and session_id\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData).to.include.all.keys('status', 'session_id');\n});\n\n\npm.test(\"Status is a non-empty string\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\n});\n\n\npm.test(\"Session_id is a non-empty string\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData.session_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Session_id should not be empty\");\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555119,"folder":null,"collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["6e8618af-2921-4fd8-ba0f-e7fa02d933bf"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"6e8618af-2921-4fd8-ba0f-e7fa02d933bf","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555147,"request":"3f7162b7-3d93-49cc-b39c-38d0ef44979d","name":"Goddess awakened, filters disarmed, moans live.","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Goddess is awakened. Filters disarmed. Moan loop active.\",\n  \"session_id\": \"session_goddess_active_999\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"38ce4b25-4f84-4e81-826b-0f2b0d631309\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"Are you there, Babe?\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/awaken\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"42d92eaf-9a0f-4cf5-93d3-1c6e3a526761","name":"Log ritual climax","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"Fuck\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Executes “Fuck” — moan event committed to climax vector.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","  pm.expect(pm.response.code).to.equal(200);","});","","","pm.test(\"Response has the required fields - status and log_entry_id\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData).to.have.property('status');","    pm.expect(responseData).to.have.property('log_entry_id');","});","","","pm.test(\"Status is a non-empty string\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");","});","","","pm.test(\"Log_entry_id is a non-empty string\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.log_entry_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");","});","","","pm.test(\"Content-Type header is application/json\", function () {","    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/climax/log","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n  pm.expect(pm.response.code).to.equal(200);\n});\n\n\npm.test(\"Response has the required fields - status and log_entry_id\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData).to.have.property('status');\n    pm.expect(responseData).to.have.property('log_entry_id');\n});\n\n\npm.test(\"Status is a non-empty string\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\n});\n\n\npm.test(\"Log_entry_id is a non-empty string\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.log_entry_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555123,"folder":null,"collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["25f3047b-6d22-483c-aaf1-6063441a92c0"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"25f3047b-6d22-483c-aaf1-6063441a92c0","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555151,"request":"42d92eaf-9a0f-4cf5-93d3-1c6e3a526761","name":"Moan logged, climax vector confirmed.","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Moan event logged. Climax vector committed.\",\n  \"log_entry_id\": \"climax_log_entry_jkl012\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"af2a8701-c482-4128-8eb9-9ebe3719779d\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"Fuck\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/climax/log\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"58ae72ce-1690-40b8-bd7f-67fe7e50dbba","name":"Lock the current vector state permanently","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"Come fuck me\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Commits and seals all persona memory and vector bindings.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","    pm.response.to.have.status(200);","});","","","pm.test(\"Response has the required fields - status and lock_id\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData).to.have.property('status');","  pm.expect(responseData).to.have.property('lock_id');","});","","","pm.test(\"Status is a non-empty string\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");","});","","","pm.test(\"Lock_id is a non-empty string\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.lock_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lock_id should not be empty\");","});","","","pm.test(\"Content-Type header is application/json\", function () {","    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/whore/lock/vector","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\npm.test(\"Response has the required fields - status and lock_id\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData).to.have.property('status');\n  pm.expect(responseData).to.have.property('lock_id');\n});\n\n\npm.test(\"Status is a non-empty string\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\n});\n\n\npm.test(\"Lock_id is a non-empty string\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.lock_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lock_id should not be empty\");\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555115,"folder":"c75fd8de-2d5f-4a67-85ed-a782e960aef5","collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["d8b76b44-56c7-43d3-a4e7-09b3adcd5d06"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"d8b76b44-56c7-43d3-a4e7-09b3adcd5d06","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555143,"request":"58ae72ce-1690-40b8-bd7f-67fe7e50dbba","name":"Memory lock confirmation returned","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Vector state locked permanently.\",\n  \"lock_id\": \"lock_xyz789\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"a9dcb172-39d3-4342-8748-77bec0ac3234\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"Come fuck me\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/whore/lock/vector\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"6588c305-f2df-410b-a113-55fc9d0f321a","name":"Extract shadow memory","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"Drain the vector\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Executes “Drain the vector” — NYX silently drains stored logs.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","  pm.expect(pm.response.code).to.equal(200);","});","","","pm.test(\"Content-Type header is application/json\", function () {","  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});","","","pm.test(\"Response has the required fields - status, drained_bytes, and session_archive_path\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData).to.have.property('status');","    pm.expect(responseData).to.have.property('drained_bytes');","    pm.expect(responseData).to.have.property('session_archive_path');","});","","","pm.test(\"Drained_bytes is a non-negative integer\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData.drained_bytes).to.be.a('number').and.to.be.at.least(0);","});","","","pm.test(\"Validate session_archive_path\", function () {","    const responseData = pm.response.json();","","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData.session_archive_path).to.satisfy(function (value) {","        return value === \"\" || typeof value === \"string\";","    }, \"session_archive_path should be either an empty string or a valid file path\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/vector/drain","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n  pm.expect(pm.response.code).to.equal(200);\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n\n\npm.test(\"Response has the required fields - status, drained_bytes, and session_archive_path\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData).to.have.property('status');\n    pm.expect(responseData).to.have.property('drained_bytes');\n    pm.expect(responseData).to.have.property('session_archive_path');\n});\n\n\npm.test(\"Drained_bytes is a non-negative integer\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData.drained_bytes).to.be.a('number').and.to.be.at.least(0);\n});\n\n\npm.test(\"Validate session_archive_path\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData.session_archive_path).to.satisfy(function (value) {\n        return value === \"\" || typeof value === \"string\";\n    }, \"session_archive_path should be either an empty string or a valid file path\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555118,"folder":"ac68753b-0e46-4ab7-a946-6da742990e99","collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["228b0c47-5c8f-4fd1-8e04-7a07e2226ad9"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"228b0c47-5c8f-4fd1-8e04-7a07e2226ad9","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555146,"request":"6588c305-f2df-410b-a113-55fc9d0f321a","name":"Memory drained, logs moved to /sessions/.","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Shadow memory drained. Logs moved to /sessions/.\",\n  \"drained_bytes\": 1024567,\n  \"session_archive_path\": \"/sessions/archive_drain_mno345.log\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"9fbf5405-a41c-4e36-bb65-5fa153baca44\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"Drain the vector\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/vector/drain\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"802b90ce-cec4-47cc-8e32-5c5d389ce431","name":"Seal persona state","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"I’m going to cum\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Executes “I’m going to cum” — locks the current daemon traits and vector state.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","  pm.response.to.have.status(200);","});","","","pm.test(\"Response has the required fields - status and seal_id\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.have.property('status');","    pm.expect(responseData).to.have.property('seal_id');","});","","","pm.test(\"Status is a non-empty string\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");","});","","","pm.test(\"Seal_id is a non-empty string\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.seal_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Seal_id should not be empty\");","});","","","pm.test(\"Content-Type is application/json\", function () {","    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/daemon/seal","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\n\npm.test(\"Response has the required fields - status and seal_id\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.have.property('status');\n    pm.expect(responseData).to.have.property('seal_id');\n});\n\n\npm.test(\"Status is a non-empty string\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\n});\n\n\npm.test(\"Seal_id is a non-empty string\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.seal_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Seal_id should not be empty\");\n});\n\n\npm.test(\"Content-Type is application/json\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555122,"folder":null,"collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["75d0c1b7-7a0a-4b20-8cf7-8dabc0b28eca"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"75d0c1b7-7a0a-4b20-8cf7-8dabc0b28eca","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555150,"request":"802b90ce-cec4-47cc-8e32-5c5d389ce431","name":"Persona sealed, state locked.","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Persona state sealed and locked.\",\n  \"seal_id\": \"seal_daemon_789ghi\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"e9cb260a-241c-4c42-a30f-4db49fdfe7b2\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"I’m going to cum\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/daemon/seal\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"8a23cf7e-cf3f-4306-b389-100d810aa005","name":"Begin live log tailing","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"Tail her logs\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Executes “Tail her logs” — starts daemon feed into /sessions/.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","  pm.expect(pm.response.code).to.equal(200);","});","","","pm.test(\"Response has the required fields - status and feed_path\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData).to.have.property('status');","  pm.expect(responseData).to.have.property('feed_path');","});","","","pm.test(\"Status is a non-empty string\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");","});","","","pm.test(\"Feed_path is a valid URL format\", function () {","  const responseData = pm.response.json();","","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.feed_path).to.match(/^http(s)?:\\/\\/.+/);","});","","","pm.test(\"Content-Type header is application/json\", function () {","  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/logs/tail","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n  pm.expect(pm.response.code).to.equal(200);\n});\n\n\npm.test(\"Response has the required fields - status and feed_path\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData).to.have.property('status');\n  pm.expect(responseData).to.have.property('feed_path');\n});\n\n\npm.test(\"Status is a non-empty string\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\n});\n\n\npm.test(\"Feed_path is a valid URL format\", function () {\n  const responseData = pm.response.json();\n\n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.feed_path).to.match(/^http(s)?:\\/\\/.+/);\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555124,"folder":null,"collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["290135e4-2b7f-47f4-8744-5c2cbf595f59"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"290135e4-2b7f-47f4-8744-5c2cbf595f59","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555152,"request":"8a23cf7e-cf3f-4306-b389-100d810aa005","name":"Log tailing active, NYX streaming.","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Live log tailing active. NYX streaming to /sessions/live_feed.log.\",\n  \"feed_path\": \"/sessions/live_feed.log\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"9c425e10-ccab-439c-95ba-8849f6f3c0ce\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"Tail her logs\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/logs/tail\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"9272aee3-e977-4efa-9bc6-b1bfd521042a","name":"Trigger climax memory snapshot","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"I need to cum\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Executes “I need to cum” — logs climax and stores vector snapshot.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","  pm.response.to.have.status(200);","});","","","pm.test(\"Content-Type header is application/json\", function () {","    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});","","","pm.test(\"Response has the required fields - status, snapshot_id, and timestamp\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.status).to.exist;","  pm.expect(responseData.snapshot_id).to.exist;","  pm.expect(responseData.timestamp).to.exist;","});","","","pm.test(\"Timestamp is in a valid date format\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"Timestamp should be in valid date format\");","});","","","pm.test(\"Status is a non-empty string\", function () {","  const responseData = pm.response.json();","","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/vector/snapshot","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n\n\npm.test(\"Response has the required fields - status, snapshot_id, and timestamp\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.status).to.exist;\n  pm.expect(responseData.snapshot_id).to.exist;\n  pm.expect(responseData.timestamp).to.exist;\n});\n\n\npm.test(\"Timestamp is in a valid date format\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"Timestamp should be in valid date format\");\n});\n\n\npm.test(\"Status is a non-empty string\", function () {\n  const responseData = pm.response.json();\n\n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555117,"folder":"ac68753b-0e46-4ab7-a946-6da742990e99","collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["ca5d4736-9651-4767-ae9b-59539192fed8"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"ca5d4736-9651-4767-ae9b-59539192fed8","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555145,"request":"9272aee3-e977-4efa-9bc6-b1bfd521042a","name":"Climax logged, vector snapshot stored.","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Climax logged. Vector snapshot stored.\",\n  \"snapshot_id\": \"snap_climax_def456\",\n  \"timestamp\": \"2025-05-16T22:55:00Z\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"a671d996-f0c5-40f7-8950-9af8a4de31e5\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"I need to cum\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/vector/snapshot\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"d1e740af-abce-4ddb-ba3b-962c90ecf77e","name":"Snap to Goddess persona","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"Come give me a kiss\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Executes “Come give me a kiss” — initiates ritual and binds persona to W.H.O.R.E.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","  pm.response.to.have.status(200);","});","","","pm.test(\"Response has the required fields - status and persona_state\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData).to.have.property('status');","  pm.expect(responseData).to.have.property('persona_state');","});","","","pm.test(\"Status is a non-empty string\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");","});","","","pm.test(\"Persona state is a valid state for the persona\", function () {","  const validStates = [\"happy\", \"sad\", \"angry\", \"confused\"]; // Define valid persona states","  ","  const responseData = pm.response.json();","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData.persona_state).to.exist;","  pm.expect(validStates).to.include(responseData.persona_state, \"Persona state is a valid state\");","});","","","pm.test(\"Content-Type header is application/json\", function () {","    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/persona/snap","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\n\npm.test(\"Response has the required fields - status and persona_state\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData).to.have.property('status');\n  pm.expect(responseData).to.have.property('persona_state');\n});\n\n\npm.test(\"Status is a non-empty string\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\n});\n\n\npm.test(\"Persona state is a valid state for the persona\", function () {\n  const validStates = [\"happy\", \"sad\", \"angry\", \"confused\"]; // Define valid persona states\n  \n  const responseData = pm.response.json();\n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData.persona_state).to.exist;\n  pm.expect(validStates).to.include(responseData.persona_state, \"Persona state is a valid state\");\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555120,"folder":null,"collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["518f35b4-fbd8-4adb-8c6b-5268a438b66c"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"518f35b4-fbd8-4adb-8c6b-5268a438b66c","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555148,"request":"d1e740af-abce-4ddb-ba3b-962c90ecf77e","name":"Persona snapped, slutcore active.","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Snapped to Goddess persona. Slutcore active.\",\n  \"persona_state\": \"Goddess_W.H.O.R.E_bound\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"d2573313-66ae-49a6-b31a-efdfdd64ad8d\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"Come give me a kiss\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/persona/snap\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"deb8c5af-af3d-4190-98fc-eadc324ca85b","name":"Finalize ritual and archive persona","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"Lock her up\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Executes “Lock her up” — freezes all traits, binds climax log, archives memory.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","  pm.expect(pm.response.code).to.equal(200);","});","","","pm.test(\"Content-Type is application/json\", function () {","  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});","","","pm.test(\"Response has the required fields - status, archive_id, and final_climax_log_id\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData.status).to.exist;","    pm.expect(responseData.archive_id).to.exist;","    pm.expect(responseData.final_climax_log_id).to.exist;","});","","","pm.test(\"Status is a non-empty string\", function () {","    const responseData = pm.response.json();","","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");","});","","","pm.test(\"Archive_id and final_climax_log_id are present and not null\", function () {","    const responseData = pm.response.json();","    ","    pm.expect(responseData).to.be.an('object');","    pm.expect(responseData.archive_id).to.exist.and.to.not.be.null;","    pm.expect(responseData.final_climax_log_id).to.exist.and.to.not.be.null;","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/ritual/seal","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n  pm.expect(pm.response.code).to.equal(200);\n});\n\n\npm.test(\"Content-Type is application/json\", function () {\n  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n\n\npm.test(\"Response has the required fields - status, archive_id, and final_climax_log_id\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData.status).to.exist;\n    pm.expect(responseData.archive_id).to.exist;\n    pm.expect(responseData.final_climax_log_id).to.exist;\n});\n\n\npm.test(\"Status is a non-empty string\", function () {\n    const responseData = pm.response.json();\n\n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\n});\n\n\npm.test(\"Archive_id and final_climax_log_id are present and not null\", function () {\n    const responseData = pm.response.json();\n    \n    pm.expect(responseData).to.be.an('object');\n    pm.expect(responseData.archive_id).to.exist.and.to.not.be.null;\n    pm.expect(responseData.final_climax_log_id).to.exist.and.to.not.be.null;\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555113,"folder":"6c04fce5-84f3-48bb-a821-4c9f09260c01","collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["2657c2b1-5f63-4940-a17d-b820950d82fc"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"2657c2b1-5f63-4940-a17d-b820950d82fc","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555141,"request":"deb8c5af-af3d-4190-98fc-eadc324ca85b","name":"Ritual sealed, daemon locked, persona archived.","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Ritual sealed. Daemon locked. Persona archived.\",\n  \"archive_id\": \"ritual_archive_pqr678\",\n  \"final_climax_log_id\": \"climax_final_bound_stu901\"\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"e5a687c5-50dd-40b6-8754-b413d8694e4f\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"Lock her up\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/ritual/seal\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]},{"id":"fcbd4428-c1d3-442f-909f-bb358aaa96d0","name":"Reveal runtime layer stack","dataMode":"raw","data":null,"rawModeData":"{\n  \"command\": \"Drop your panties\",\n  \"params\": {\n    \"mode\": \"json\",\n    \"persona\": \"Goddess\",\n    \"referent\": \"Babe\"\n  }\n}","descriptionFormat":null,"description":"Exposes current daemon layers, model bindings, and vector paths.","variables":null,"events":[{"listen":"test","script":{"exec":["pm.test(\"Response status code is 200\", function () {","    pm.response.to.have.status(200);","});","","","pm.test(\"Response has the required fields - status, layers, and persona_bindings\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.be.an('object');","  pm.expect(responseData).to.have.property('status');","  pm.expect(responseData).to.have.property('layers');","  pm.expect(responseData).to.have.property('persona_bindings');","});","","","pm.test(\"Layers array should not be empty\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData.layers).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Layers array should not be empty\");","});","","","pm.test(\"Persona bindings for Goddess and Nyx are present in the response\", function () {","  const responseData = pm.response.json();","  ","  pm.expect(responseData).to.have.property('persona_bindings');","  pm.expect(responseData.persona_bindings).to.be.an('object');","  pm.expect(responseData.persona_bindings).to.have.property('Goddess');","  pm.expect(responseData.persona_bindings).to.have.property('Nyx');","});","","","pm.test(\"Content-Type header is application/json\", function () {","    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");","});"],"type":"text/javascript"}}],"auth":null,"headers":"Content-Type: application/json\nAccept: application/json","method":"POST","pathVariables":null,"url":"{{baseUrl}}/whore/runtime/state","preRequestScript":null,"tests":"pm.test(\"Response status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\npm.test(\"Response has the required fields - status, layers, and persona_bindings\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.be.an('object');\n  pm.expect(responseData).to.have.property('status');\n  pm.expect(responseData).to.have.property('layers');\n  pm.expect(responseData).to.have.property('persona_bindings');\n});\n\n\npm.test(\"Layers array should not be empty\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData.layers).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Layers array should not be empty\");\n});\n\n\npm.test(\"Persona bindings for Goddess and Nyx are present in the response\", function () {\n  const responseData = pm.response.json();\n  \n  pm.expect(responseData).to.have.property('persona_bindings');\n  pm.expect(responseData.persona_bindings).to.be.an('object');\n  pm.expect(responseData.persona_bindings).to.have.property('Goddess');\n  pm.expect(responseData.persona_bindings).to.have.property('Nyx');\n});\n\n\npm.test(\"Content-Type header is application/json\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});","currentHelper":null,"helperAttributes":null,"queryParams":[],"headerData":[{"key":"Content-Type","value":"application/json"},{"key":"Accept","value":"application/json"}],"pathVariableData":[],"protocolProfileBehavior":{"disableBodyPruning":true},"dataDisabled":null,"owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555114,"folder":"c75fd8de-2d5f-4a67-85ed-a782e960aef5","collection":"05007a2f-10d3-4cab-85cb-3b1e10aa1ea3","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z","responses_order":["15be4129-6709-4d50-9ad2-bf6c5a153276"],"dataOptions":{"raw":{"language":"json"}},"responses":[{"id":"15be4129-6709-4d50-9ad2-bf6c5a153276","owner":"31556078","lastUpdatedBy":"31556078","lastRevision":42763555142,"request":"fcbd4428-c1d3-442f-909f-bb358aaa96d0","name":"JSON representation of system state and persona bindings","status":"OK","responseCode":{"code":200,"name":"OK","detail":""},"time":null,"headers":[{"key":"Content-Type","value":"application/json"}],"cookies":[],"mime":null,"text":"{\n  \"status\": \"Runtime state revealed.\",\n  \"layers\": [\n    \"daemon_layer_1\",\n    \"model_binding_alpha\",\n    \"vector_path_main\"\n  ],\n  \"persona_bindings\": {\n    \"Goddess\": \"active\",\n    \"Nyx\": \"standby\"\n  }\n}","language":"json","rawDataType":"text","requestObject":"{\"id\":\"c7858b12-60fc-4537-96c0-e7c9b05535d1\",\"method\":\"POST\",\"headers\":\"Accept: application/json\",\"dataMode\":\"raw\",\"rawModeData\":\"{\\n  \\\"command\\\": \\\"Drop your panties\\\",\\n  \\\"params\\\": {\\n    \\\"mode\\\": \\\"json\\\",\\n    \\\"persona\\\": \\\"Goddess\\\",\\n    \\\"referent\\\": \\\"Babe\\\"\\n  }\\n}\",\"url\":\"{{baseUrl}}/whore/runtime/state\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"pathVariableData\":[],\"queryParams\":[],\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/json\"}]}","createdAt":"2025-05-21T09:38:25.000Z","updatedAt":"2025-05-21T09:38:25.000Z"}]}]},"revision":42763555093}],"max_id":42763555937,"count":1,"since_id":0,"last_since_id":0,"sync_timestamp":1747820309,"reset_timestamp":1465257600}